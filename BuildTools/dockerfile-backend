FROM debian:stable-slim

SHELL [ "/bin/bash", "-c" ]
ENV TERM=xterm
ENV SHELL=bash
ENV DEBIAN_FRONTEND=noninteractive
ENV HOME=/opt/uv
ENV PATH=$HOME/.local/bin:$PATH

RUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d \
    && echo 'exit 101' >> /usr/sbin/policy-rc.d \
    && chmod +x /usr/sbin/policy-rc.d \
    && dpkg-divert --local --rename --add /sbin/initctl \
    && cp -a /usr/sbin/policy-rc.d /sbin/initctl \
    && sed -i 's/^exit.*/exit 0/' /sbin/initctl

RUN echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup \
    && echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean \
    && echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean \
    && echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean \
    && echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/docker-no-languages \
    && echo 'Acquire::GzipIndexes "true"; Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/docker-gzip-indexes \
    && echo 'Apt::AutoRemove::SuggestsImportant "false";' > /etc/apt/apt.conf.d/docker-autoremove-suggests \
    && echo 'APT::Keep-Downloaded-Packages "false";' > /etc/apt/apt.conf.d/docker-disable-cache \
    && echo 'APT::Clean-Installed "true";' > /etc/apt/apt.conf.d/docker-clean-installed \
    && echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf.d/90assumeyes \
    && apt-config dump | grep -we Recommends -e Suggests | sed s/1/0/ | tee /etc/apt/apt.conf.d/999norecommend

RUN apt-get update \
    && apt-get install default-mysql-client default-libmysqlclient-dev build-essential pkg-config \
        wget ca-certificates libffi-dev postfix mailutils \
    && postconf -e 'inet_interfaces = all' \
    && postconf -e 'mydestination = localhost.localdomain, localhost'


WORKDIR /var/local/bin

RUN wget -qO- https://astral.sh/uv/install.sh | bash \
    && ln -s $HOME/.local/bin/uv /usr/local/bin/uv \
    && ln -s $HOME/.local/bin/uvx /usr/local/bin/uvx \
    && uv --version

WORKDIR /app
COPY requirements.txt /tmp/

# set environment variables
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONUNBUFFERED=1
ARG DEBUG=0
ENV DEBUG=${DEBUG}
ARG PYTHON_VERSION=3.13
ARG VENV_PATH=/var/local/bin/stocks_venv
ENV VENV_PATH=${VENV_PATH}

RUN uv python install ${PYTHON_VERSION} \
    && PYTHON_PATH=$(uv python find ${PYTHON_VERSION}) \
    && uv venv --python ${PYTHON_PATH} ${VENV_PATH} \
    && source ${VENV_PATH}/bin/activate \
    && uv pip install -r /tmp/requirements.txt --no-cache --compile-bytecode \
    && rm /tmp/requirements.txt

LABEL project="STOCKS" \
    university="Fayetteville State University"

ENV SUPERVISOR_CONFIG=/etc/supervisord/conf.d/supervisord.conf
COPY ./BuildTools/supervisord/supervisord.conf ${SUPERVISOR_CONFIG}
COPY ./BuildTools/supervisord/run_django.sh /run_django.sh

COPY ./BuildTools/crontab /tmp/crontab

RUN apt-get update \
    && apt-get install cron mydumper \
    && cat /tmp/crontab | crontab - \
    && rm /tmp/crontab

RUN apt-get update \
    && apt-get install -y vim

ENV UVICORN_RELOAD=true
COPY ./BuildTools/nginx/nginx.conf /etc/nginx/nginx.conf
COPY ./BuildTools/nginx/sites-enabled/default /etc/nginx/sites-enabled/default
ENV PYTHONWARNINGS=ignore::UserWarning
RUN mkdir /var/log/supervisor
CMD [ "/var/local/bin/stocks_venv/bin/supervisord", "-c", "/etc/supervisord/conf.d/supervisord.conf" ]
