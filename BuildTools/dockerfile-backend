FROM debian:bookworm

SHELL [ "/bin/bash", "-c" ]
ENV TERM=xterm
ENV SHELL=bash
ENV DEBIAN_FRONTEND=noninteractive

RUN echo '#!/bin/sh' > /usr/sbin/policy-rc.d \
    && echo 'exit 101' >> /usr/sbin/policy-rc.d \
    && chmod +x /usr/sbin/policy-rc.d \
    && dpkg-divert --local --rename --add /sbin/initctl \
    && cp -a /usr/sbin/policy-rc.d /sbin/initctl \
    && sed -i 's/^exit.*/exit 0/' /sbin/initctl

RUN echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup \
    && echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean \
    && echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean \
    && echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean \
    && echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/docker-no-languages \
    && echo 'Acquire::GzipIndexes "true"; Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/docker-gzip-indexes \
    && echo 'Apt::AutoRemove::SuggestsImportant "false";' > /etc/apt/apt.conf.d/docker-autoremove-suggests \
    && echo 'APT::Keep-Downloaded-Packages "false";' > /etc/apt/apt.conf.d/docker-disable-cache \
    && echo 'APT::Clean-Installed "true";' > /etc/apt/apt.conf.d/docker-clean-installed \
    && echo 'APT::Get::Assume-Yes "true";' >> /etc/apt/apt.conf.d/90assumeyes \
    && apt-config dump | grep -we Recommends -e Suggests | sed s/1/0/ | tee /etc/apt/apt.conf.d/999norecommend

RUN apt-get update \
    && apt-get install default-mysql-client nginx default-libmysqlclient-dev build-essential supervisor pkg-config \
        postfix mailutils \
    && postconf -e 'inet_interfaces = all' \
    && postconf -e 'mydestination = localhost.localdomain, localhost'


WORKDIR /var/local/bin

RUN apt-get update \
    && apt-get install python3-minimal python3-pip python3-venv python3-virtualenv python3-dev

WORKDIR /app
COPY requirements.txt /tmp/

# set environment variables
ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1
ARG DEBUG=0
ENV DEBUG=${DEBUG}

RUN virtualenv /var/local/bin/stocks_venv \
    && source /var/local/bin/stocks_venv/bin/activate \
    && python -m pip install -r /tmp/requirements.txt --no-cache \
    && rm /tmp/requirements.txt

# RUN source /var/local/bin/stocks_venv/bin/activate \
#     && django-admin startproject backend . \
#     && python manage.py startapp pullstocks \
#     && python manage.py startapp analysts

LABEL project="STOCKS" \
    university="Fayetteville State University"

COPY ./BuildTools/supervisord/supervisord.conf /etc/supervisord/conf.d/supervisord.conf

COPY ./BuildTools/crontab /tmp/crontab

RUN apt-get update \
    && apt-get install -y cron mydumper \
    && cat /tmp/crontab | crontab - \
    && rm /tmp/crontab

RUN apt-get update \
    && apt-get install -y vim

CMD [ "/usr/bin/supervisord", "-c", "/etc/supervisord/conf.d/supervisord.conf" ]
