# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python Code Coverage

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - name: Setup Env Vars
      run: |
        cat >> .envvars << EOF
            DJANGO_SECRET_KEY='django-insecure-4o3ug_h7f1r6fa2z5@4o3ug_h7f1r6fa2-!x=-n*tfuccxn5n'
            MYSQL_HOST=stocksdb
            MYSQL_PORT=3306
            MYSQL_ROOT_PASSWORD=unittestrootpw
            MYSQL_DATABASE=stocksapp
            MYSQL_USER=team2
            MYSQL_PASSWORD=unittestMysqlP@ssword
            MYSQL_PWD=unittestMysqlP@ssword
        EOF
    - name: use buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Enable BuildKit
      run: |
        echo '{"experimental":true}' | sudo tee /etc/docker/daemon.json
        sudo systemctl restart docker
    - name: Cache docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-
    - name: Compose docker
      run: |
        DOCKER_BUILDKIT=1 docker compose -f BuildTools/docker-compose.yml up -d --build --remove-orphans
    - name: Build and push Docker images
      run: |
        DOCKER_BUILDKIT=1 docker-compose -f BuildTools/docker-compose.yml push
    - name: Test with coverage
      run: |
        docker exec stocks_backend /bin/bash -c 'source /var/local/bin/stocks_venv/bin/activate; coverage run manage.py test --keepdb'
    - name: Output results
      run: |
        docker exec stocks_backend /bin/bash -c 'source /var/local/bin/stocks_venv/bin/activate; coverage report --omit="*/tests/*" -m'
