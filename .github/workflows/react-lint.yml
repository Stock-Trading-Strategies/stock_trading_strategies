# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: React Linting

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  lint:
    runs-on: ubuntu-latest
    env:
      ESLOG_FILE: eslint.results.log
    steps:
    - name: checkout code
      uses: actions/checkout@v3
    - name: Setup Env Vars
      run: |
        cat >> .envvars << EOF
            DJANGO_SECRET_KEY='django-insecure-4o3ug_h7f1r6fa2z5@4o3ug_h7f1r6fa2-!x=-n*tfuccxn5n'
            MYSQL_HOST=stocksdb
            MYSQL_PORT=3306
            MYSQL_ROOT_PASSWORD=unittestrootpw
            MYSQL_DATABASE=stocksapp
            MYSQL_USER=team2
            MYSQL_PASSWORD=unittestMysqlP@ssword
            MYSQL_PWD=unittestMysqlP@ssword
        EOF
    - name: Build FrontEnd
      run: |
        docker compose -f BuildTools/docker-compose.yml up -d --build --remove-orphans frontend
    - name: Copy in ESLint Config File
      run: |
        docker cp reactjs/eslint.config.mjs stocks_frontend:/react-app/src/
    - name: Run EsLint
      run: |
        set +e  # Disable "exit on error" behavior
        docker exec stocks_frontend /bin/bash -c 'cd src; npx eslint $(find ./ -name "*.js" | grep -vP ".test.js") --quiet 2>/dev/null' > $ESLOG_FILE
    - name: Output Lint info
      run: |
        cat $ESLOG_FILE
    - name: Throw Lint Error Flag
      run: |
        if [[ $(grep -c -P '[0-9]+ problems' $ESLOG_FILE ) -ne 0 ]]; then
          echo "ESLint found errors."
          exit 1
        fi
